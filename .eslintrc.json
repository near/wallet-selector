{
  "root": true,
  "env": {
    "commonjs": true,
    "browser": true,
    "es6": true,
    "node": true,
    "jest": true
  },
  "ignorePatterns": ["**/*"],
  "plugins": [
    "@nrwl/nx",
    "@typescript-eslint",
    "prettier",
    "react-hooks"
  ],
  "overrides": [
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
      "rules": {
        "@nrwl/nx/enforce-module-boundaries": [
          "error",
          {
            "enforceBuildableLibDependency": true,
            "allow": [],
            "depConstraints": [
              {
                "sourceTag": "*",
                "onlyDependOnLibsWithTags": ["*"]
              }
            ]
          }
        ]
      }
    },
    {
      "files": ["*.ts", "*.tsx"],
      "parserOptions": {
        "project": ["tsconfig.*?.json"]
      },
      "extends": [
        "plugin:@nrwl/nx/typescript",
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "prettier"
      ],
      "rules": {
        "prettier/prettier": ["error",
          {
            "arrowParens": "always",
            "bracketSpacing": true,
            "jsxSingleQuote": false,
            "printWidth": 80,
            "semi": true,
            "singleQuote": false,
            "tabWidth": 2,
            "useTabs": false,
            "trailingComma": "es5",
            "quoteProps": "as-needed",
            "proseWrap": "preserve",
            "insertPragma": false,
            "requirePragma": false,
            "bracketSameLine": false,
            "endOfLine": "auto"
          }
        ],
        "@typescript-eslint/ban-ts-comment": "off",
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/no-non-null-asserted-optional-chain": "off",
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "variableLike",
            "format": ["camelCase", "PascalCase", "UPPER_CASE"],
            "leadingUnderscore": "allow"
          }
        ],
        "@typescript-eslint/no-explicit-any": "error",
        "@typescript-eslint/no-empty-interface": "error",
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-var-requires": "warn",
        "@typescript-eslint/no-use-before-define": "error",
        "@typescript-eslint/type-annotation-spacing": "error",
        "@typescript-eslint/no-unused-vars": "error",
        "@typescript-eslint/ban-ts-ignore": "off",
        "@typescript-eslint/array-type": ["error", { "default": "generic" }],
        "@typescript-eslint/consistent-type-imports": "error",
        "@typescript-eslint/consistent-type-exports": "error",
        "curly": ["error", "all"],
        "eqeqeq": ["error", "smart"],
        "default-case": "off",
        "no-caller": "error",
        "no-case-declarations": "off",
        "no-console": "error",
        "no-debugger": "error",
        "no-eval": "error",
        "no-fallthrough": "error",
        "no-labels": "warn",
        "no-redeclare": "error",
        "no-shadow": "off",
        "@typescript-eslint/no-shadow": "error",
        "no-unused-expressions": "error",
        "radix": ["error", "as-needed"],
        "no-restricted-syntax": [
          "error",
          {
            "selector": "CallExpression[callee.name!='parseInt'] > Identifier[name='parseInt']",
            "message": "Call parseInt directly to guarantee radix param is not incorrectly provided"
          },
          "error",
          {
            "selector": "CallExpression[callee.name!='parseFloat'] > Identifier[name='parseFloat']",
            "message": "Call parseFloat directly to guarantee radix param is not incorrectly provided"
          }
        ],
        "strict": ["error", "global"],
        "valid-jsdoc": "error"
      }
    },
    {
      "files": ["*.js", "*.jsx"],
      "extends": ["plugin:@nrwl/nx/javascript"],
      "rules": {}
    }
  ]
}
